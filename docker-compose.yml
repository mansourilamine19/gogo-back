# docker/docker-compose.yml
version: "3.8"

networks:
  nginx-php-mysql-node:

services:
  #php-service
  php-service:
    container_name: php-fpm
    build:
      args:
        VERSION: ${PHP_VERSION}
      context: docker/php-fpm
    environment:
      - APP_ENV=${APP_ENV}
      - APP_SECRET=${APP_SECRET}
    volumes:
      - ${APP_FOLDER}:/var/www
    depends_on:
      - elasticsearch
    networks:
      - nginx-php-mysql-node
  #nginx-service
  nginx-service:
    container_name: nginx-container
    build:
      args:
        VERSION: ${NGNX_VERSION}
      context: docker/nginx
    volumes:
      - ${APP_FOLDER}:/var/www
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/log:/var/log/nginx
    expose:
      - "8000"
    depends_on:
      - php-service
      - mysql-service
      - elasticsearch
      - elasticsearch-head
    ports:
      - "8000:80"
    networks:
      - nginx-php-mysql-node
  #mysql-service
  mysql-service:
    build:
      args:
        VERSION: ${MYSQL_VERSION}
      context: docker/database
    volumes:
      - ./docker/database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./docker/database/data:/var/lib/mysql
    #command: ['mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci', '--default-authentication-plugin=mysql_native_password']
    restart: always
    ports:
      - '3306:3306'
    environment:
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_USER: ${DATABASE_USER}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD}
    networks:
      - nginx-php-mysql-node
  #phpmyadmin-service
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin-container
    restart: always
    ports:
      - '8080:80'
    environment:
      PMA_HOST: mysql-service
    networks:
      - nginx-php-mysql-node
    depends_on:
      - mysql-service
  #node-service
  #    node-service:
  #        image: node:${NODE_VERSION}
  #        container_name: node-container
  #        command: npm start
  #        volumes:
  #            - ./nodejs:/var/www/project
  #        working_dir: /var/www/project
  #        ports:
  #            - "3000:3000"
  #        networks:
  #            - nginx-php-mysql-node
  # elasticsearch ——————————————————————————————————————————————————————————————

  # elasticsearch server (official image)
  # https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html
  elasticsearch:
    container_name: sb-elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTECSEARCH_VERSION} # 6.8.4 out
    ports:
      - "9200:9200"
      - "9300:9300"
    expose:
      - "9200"
      - "9300"
    environment:
      - http.host=0.0.0.0
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1G -Xmx1G"
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
      - http.cors.allow-methods=OPTIONS, HEAD, GET, POST, PUT, DELETE
      - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length
      - http.cors.allow-credentials=true
      - xpack.security.enabled=false
      - logger.level=debug
      #- network.host=localhost
      #- cluster.name=docker-cluster
      #- bootstrap.memory_lock=true
      #- "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      #- "discovery.type=single-node"
      #- "xpack.security.enabled=false"
      #- "http.cors.enabled=true"
      #- "http.cors.allow-origin=*"

      #ES_JAVA_OPTS: '-Xms512m -Xmx512m'
      #cluster.name: es-cluster
      #node.name: es1
      #network.bind_host: 0.0.0.0
      #discovery.zen.minimum_master_nodes: 1
      #discovery.zen.ping.unicast.hosts: elasticsearch1
      #xpack.security.enabled: 'false'
      #http.cors.enabled: 'true'
      #http.cors.allow-origin: '*'
      #http.cors.allow-methods: OPTIONS, HEAD, GET, POST, PUT, DELETE
      #http.cors.allow-headers: X-Requested-With,X-Auth-Token,Content-Type, Content-Length
      #logger.level: debug
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./docker/esdata/db:/usr/share/elasticsearch/data
      - ./docker/esdata/logs:/usr/share/elasticsearch/logs
      - ./docker/esdata/repo:/usr/share/elasticsearch/repo
    networks:
      - nginx-php-mysql-node

  # elasticsearch head manager (fork of mobz/elasticsearch-head for elasticsearch 6)
  # /!\ it isn't an official image /!\
  # https://hub.docker.com/r/tobias74/elasticsearch-head
  elasticsearch-head:
    container_name: sb-elasticsearch-head
    depends_on:
      - elasticsearch
    image: tobias74/elasticsearch-head:6
    ports:
      - "9109:9100"
    networks:
      - nginx-php-mysql-node

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:${KIBANA_VERSION}
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana
      - ELASTICSEARCH_PASSWORD=kibana
    depends_on:
      - elasticsearch
    networks:
      - nginx-php-mysql-node
  #Interface graphique docker de Unix
  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    ports:
      - 9000:9000
    volumes:
      - ./docker/portainer/var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/portainer/etc/localtime:/etc/localtime:ro
      - ./docker/portainer/etc/timezone:/etc/timezone:ro
      - ./docker/portainer:/data
    networks:
      - nginx-php-mysql-node
